{"version":3,"sources":["components/Hook/Connection.js","components/Hook/index.js","App.js","serviceWorker.js","index.js"],"names":["Connection","_ref","connect","disconnect","connectBtn","_Form$useForm","Form","useForm","form","_slicedToArray","_useState","useState","_useState2","expand","setExpand","initialConnectionOptions","protocol","host","clientId","Math","random","toString","substring","port","username","password","ConnectionForm","React","createElement","layout","name","initialValues","onFinish","values","url","concat","clean","reconnectPeriod","connectTimeout","Row","gutter","Col","lg","span","sm","Item","label","Select","onChange","value","setFieldsValue","Option","Input","Card","title","extra","Button","onClick","type","bodyStyle","display","actions","submit","danger","Weather","_ref$data","data","style","backgroundColor","color","textAlign","fontSize","width","padding","marginRight","temperature","humidity","HookMqtt","client","setClient","_useState3","_useState4","weather","setWeather","_useState5","_useState6","list","setList","_useState7","_useState8","connectStatus","setConnectStatus","useEffect","on","notification","success","message","mqttSub","topic","qos","err","error","console","log","end","JSON","parse","oldValue","_toConsumableArray","_objectSpread","time","Date","dayjs","format","info","mqttPublish","context","payload","publish","subscription","subscribe","Fragment","mqttOption","mqtt","warning","background","marginBottom","ReactECharts","option","legend","xAxis","map","item","axisLabel","show","rotate","interval","yAxis","dataZoom","xAxisIndex","start","series","smooth","tooltip","trigger","justifyContent","App","className","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.574fb00e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Card, Button, Form, Input, Row, Col, Select } from 'antd'\r\n\r\n/**\r\n * this demo uses EMQX Public MQTT Broker (https://www.emqx.com/en/mqtt/public-mqtt5-broker), here are the details:\r\n *\r\n * Broker host: broker.emqx.io\r\n * WebSocket port: 8083\r\n * WebSocket over TLS/SSL port: 8084\r\n */\r\n\r\nconst Connection = ({ connect, disconnect, connectBtn }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const [expand, setExpand] = useState(true);\r\n\r\n  const initialConnectionOptions = {\r\n    // ws or wss\r\n    protocol: 'wss',\r\n    host: 'broker.emqx.io',\r\n    clientId: 'emqx_react_' + Math.random().toString(16).substring(2, 8),// 一个clientId 只能绑定一次, 两个绑定一样的clientId 会导致都连接不上\r\n    // ws -> 8083; wss -> 8084\r\n    port: 8084,\r\n    /**\r\n     * By default, EMQX allows clients to connect without authentication.\r\n     * https://docs.emqx.com/en/enterprise/v4.4/advanced/auth.html#anonymous-login\r\n     */\r\n    username: 'jonas',\r\n    password: 'abc123',\r\n  }\r\n\r\n  const handleProtocolChange = (value) => {\r\n    form.setFieldsValue({\r\n      port: value === 'wss' ? 8084 : 8083,\r\n    })\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    const { protocol, host, clientId, port, username, password } = values\r\n    const url = `${protocol}://${host}:${port}/mqtt`\r\n    const options = {\r\n      clientId,\r\n      username,\r\n      password,\r\n      clean: true,\r\n      reconnectPeriod: 1000, // ms\r\n      connectTimeout: 30 * 1000, // ms\r\n    }\r\n    connect(url, options)\r\n  }\r\n\r\n  const handleConnect = () => {\r\n    form.submit()\r\n  }\r\n\r\n  const handleDisconnect = () => {\r\n    disconnect()\r\n  }\r\n\r\n  const ConnectionForm = (\r\n    <Form\r\n      layout=\"vertical\"\r\n      name=\"basic\"\r\n      form={form}\r\n      initialValues={initialConnectionOptions}\r\n      onFinish={onFinish}\r\n    >\r\n      <Row gutter={20}>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"协议\" name=\"protocol\">\r\n            <Select onChange={handleProtocolChange}>\r\n              <Select.Option value=\"ws\">ws</Select.Option>\r\n              <Select.Option value=\"wss\">wss</Select.Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"主机\" name=\"host\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"端口\" name=\"port\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"客户端ID\" name=\"clientId\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"用户名\" name=\"username\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col lg={{ span: 8 }} sm={{ span: 24 }}>\r\n          <Form.Item label=\"密码\" name=\"password\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n\r\n  return (\r\n    <Card\r\n      title=\"MQTT连接\"\r\n      extra={\r\n        <Button onClick={() => setExpand(!expand)} type='link'>{expand ? '收起' : '展开'}</Button>\r\n      }\r\n      bodyStyle={{ display: expand ? 'block' : 'none' }}\r\n      actions={expand ? [\r\n        <Button type=\"primary\" onClick={handleConnect}>\r\n          {connectBtn}\r\n        </Button>,\r\n        <Button danger onClick={handleDisconnect}>\r\n          关闭连接\r\n        </Button>,\r\n      ] : null}\r\n    >\r\n      {expand && ConnectionForm}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Connection\r\n","import React, { useEffect, useState } from 'react'\r\nimport Connection from './Connection'\r\nimport mqtt from 'mqtt'\r\nimport { Button, notification } from 'antd'\r\nimport ReactECharts from 'echarts-for-react';\r\nimport dayjs from 'dayjs';\r\n\r\nfunction getTime() {\r\n  return dayjs().format('HH:mm:ss')\r\n}\r\n\r\nfunction Weather({ data = {} }) {\r\n  return (\r\n    <div style={{ backgroundColor: '#fff', color: '#000', textAlign: 'center', fontSize: 14, width: '100%', padding: '8px' }}>\r\n      <span style={{ marginRight: 10 }}>\r\n        当前:\r\n     </span>\r\n      <span style={{ marginRight: 10 }}>\r\n        温度:{`${data.temperature}℃`}\r\n      </span>\r\n\r\n      <span>\r\n        湿度:{`${data.humidity}%`}\r\n      </span>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst HookMqtt = () => {\r\n  const [client, setClient] = useState(null)\r\n  const [weather, setWeather] = useState({\r\n    humidity: 0,\r\n    temperature: 0\r\n  });\r\n  const [list, setList] = useState([]);\r\n  const [connectStatus, setConnectStatus] = useState('连接')\r\n\r\n  const mqttConnect = (host, mqttOption) => {\r\n    setConnectStatus('连接中...')\r\n    setClient(mqtt.connect(host, mqttOption))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (client) {\r\n      client.on('connect', () => {\r\n        setConnectStatus('已连接');\r\n\r\n        notification.success({\r\n          message: '连接成功!'\r\n        });\r\n\r\n        mqttSub({\r\n          topic: 'weather',\r\n          qos: 0\r\n        });\r\n        mqttSub({\r\n          topic: 'switch/feedback',\r\n          qos: 0\r\n        });\r\n\r\n      });\r\n\r\n      client.on('error', (err) => {\r\n        notification.error('连接出现错误! ')\r\n        console.log(err)\r\n        client.end()\r\n      })\r\n\r\n      client.on('reconnect', () => {\r\n        setConnectStatus('重连中...')\r\n      });\r\n\r\n      client.on('message', (topic, message) => {// topic 是string, message是 uint8_array \r\n        console.log(`received message:\\n ${message} \\n from topic: ${topic}`)\r\n        if (topic == 'weather') {\r\n          const data = JSON.parse(`${message}`);// { humidity:20, temperature:13}\r\n          setWeather(data);\r\n          setList(oldValue => [...oldValue, { ...data, time: getTime(new Date()) }]);\r\n        } else if (topic == 'switch/feedback') {\r\n          notification.info({\r\n            message: `${message}`\r\n          })\r\n        }\r\n      });\r\n    }\r\n  }, [client])\r\n\r\n  const mqttDisconnect = () => {\r\n    if (client) {\r\n      try {\r\n        client.end(false, () => {\r\n          setConnectStatus('连接')\r\n          notification.warning({\r\n            message: '连接已关闭!'\r\n          })\r\n        })\r\n      } catch (error) {\r\n        console.log('disconnect error:', error)\r\n      }\r\n    }\r\n  }\r\n\r\n  const mqttPublish = (context) => {\r\n    if (client) {\r\n      const { topic, qos, payload } = context\r\n      client.publish(topic, payload, { qos }, (error) => {\r\n        if (error) {\r\n          console.log('Publish error: ', error)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const mqttSub = (subscription) => {\r\n    if (client) {\r\n      const { topic, qos } = subscription\r\n      client.subscribe(topic, { qos }, (error) => {\r\n        if (error) {\r\n          console.log('Subscribe to topics error', error)\r\n          return\r\n        }\r\n        console.log(`Subscribe to topics: ${topic}`)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Connection\r\n        connect={mqttConnect}\r\n        disconnect={mqttDisconnect}\r\n        connectBtn={connectStatus}\r\n      />\r\n\r\n      <Weather data={weather} />\r\n\r\n      <div style={{ background: '#fff', width: '100%', marginBottom: 20 }}>\r\n        <ReactECharts\r\n          option={{\r\n            legend: {\r\n              data: ['温度', '湿度']\r\n            },\r\n            xAxis: {\r\n              type: 'category',\r\n              data: list.map(item => item.time),\r\n              axisLabel: {\r\n                show: false,\r\n                rotate: 45,\r\n                interval: 0// 每隔一个标签显示一个\r\n              }\r\n            },\r\n            yAxis: {\r\n              type: 'value',\r\n            },\r\n            // 设置缩放滑块\r\n            dataZoom: [\r\n              {\r\n                type: 'slider',\r\n                xAxisIndex: 0,\r\n                start: 0,\r\n                end: 100\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '湿度',\r\n                data: list.map(item => item.humidity),\r\n                type: 'line',\r\n                smooth: true,\r\n              },\r\n              {\r\n                name: '温度',\r\n                data: list.map(item => item.temperature),\r\n                type: 'line',\r\n                smooth: true,\r\n              },\r\n            ],\r\n            tooltip: {\r\n              trigger: 'axis',\r\n            }\r\n          }} />\r\n      </div>\r\n\r\n      <div style={{ backgroundColor: '#fff', padding: 10, width: '100%', display: 'flex', justifyContent: 'space-around' }}>\r\n        <Button type='danger' onClick={() => {\r\n          mqttPublish({\r\n            qos: 0,\r\n            topic: 'switch',\r\n            payload: `{state:\"off\"}`\r\n          })\r\n        }}>关闭空调</Button>\r\n        <Button type='primary' onClick={() => {\r\n          mqttPublish({\r\n            qos: 0,\r\n            topic: 'switch',\r\n            payload: `{state:\"on\"}`\r\n          })\r\n        }}>打开空调</Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HookMqtt\r\n","import React from 'react'\r\nimport HookMqtt from './components/Hook/'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HookMqtt />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'))\r\nroot.render(<App />)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}