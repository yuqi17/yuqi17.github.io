{"version":3,"sources":["components/Hook/Connection.js","components/Hook/Publisher.js","components/Hook/Subscriber.js","components/Hook/Receiver.js","components/Hook/index.js","App.js","serviceWorker.js","index.js"],"names":["Connection","_ref","connect","disconnect","connectBtn","_Form$useForm","Form","useForm","form","_slicedToArray","ConnectionForm","React","createElement","layout","name","initialValues","protocol","host","clientId","port","username","password","onFinish","values","url","concat","clean","reconnectPeriod","connectTimeout","Row","gutter","Col","span","Item","label","Select","onChange","value","setFieldsValue","Option","Input","Card","title","actions","Button","type","onClick","submit","danger","Publisher","publish","qosOptions","useContext","QosOption","PublishForm","topic","qos","payload","options","TextArea","offset","style","textAlign","htmlType","Subscriber","sub","unSub","showUnsub","SubForm","marginLeft","getFieldsValue","Receiver","_useState","useState","_useState2","messages","setMessages","useEffect","_toConsumableArray","List","size","bordered","dataSource","renderItem","item","Meta","description","message","createContext","qosOption","HookMqtt","client","setClient","_useState3","_useState4","isSubed","setIsSub","_useState5","_useState6","setPayload","_useState7","_useState8","connectStatus","setConnectStatus","on","alert","err","console","error","end","toString","log","Fragment","mqttOption","mqtt","Provider","subscription","subscribe","unsubscribe","context","App","className","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5129e3a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Button, Form, Input, Row, Col, Select } from 'antd'\r\n\r\n/**\r\n * this demo uses EMQX Public MQTT Broker (https://www.emqx.com/en/mqtt/public-mqtt5-broker), here are the details:\r\n *\r\n * Broker host: broker.emqx.io\r\n * WebSocket port: 8083\r\n * WebSocket over TLS/SSL port: 8084\r\n */\r\n\r\nconst Connection = ({ connect, disconnect, connectBtn }) => {\r\n  const [form] = Form.useForm()\r\n  const initialConnectionOptions = {\r\n    // ws or wss\r\n    protocol: 'wss',\r\n    host: 'broker.emqx.io',\r\n    clientId: 'mqttx_27004980',// 'emqx_react_' + Math.random().toString(16).substring(2, 8),\r\n    // ws -> 8083; wss -> 8084\r\n    port: 8083,\r\n    /**\r\n     * By default, EMQX allows clients to connect without authentication.\r\n     * https://docs.emqx.com/en/enterprise/v4.4/advanced/auth.html#anonymous-login\r\n     */\r\n    username: 'emqx_test',\r\n    password: 'emqx_test',\r\n  }\r\n\r\n  const handleProtocolChange = (value) => {\r\n    form.setFieldsValue({\r\n      port: value === 'wss' ? 8084 : 8083,\r\n    })\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    const { protocol, host, clientId, port, username, password } = values\r\n    const url = `${protocol}://${host}:${port}/mqtt`\r\n    const options = {\r\n      clientId,\r\n      username,\r\n      password,\r\n      clean: true,\r\n      reconnectPeriod: 1000, // ms\r\n      connectTimeout: 30 * 1000, // ms\r\n    }\r\n    connect(url, options)\r\n  }\r\n\r\n  const handleConnect = () => {\r\n    form.submit()\r\n  }\r\n\r\n  const handleDisconnect = () => {\r\n    disconnect()\r\n  }\r\n\r\n  const ConnectionForm = (\r\n    <Form\r\n      layout=\"vertical\"\r\n      name=\"basic\"\r\n      form={form}\r\n      initialValues={initialConnectionOptions}\r\n      onFinish={onFinish}\r\n    >\r\n      <Row gutter={20}>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Protocol\" name=\"protocol\">\r\n            <Select onChange={handleProtocolChange}>\r\n              <Select.Option value=\"ws\">ws</Select.Option>\r\n              <Select.Option value=\"wss\">wss</Select.Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Host\" name=\"host\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Port\" name=\"port\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Client ID\" name=\"clientId\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Username\" name=\"username\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8}>\r\n          <Form.Item label=\"Password\" name=\"password\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n\r\n  return (\r\n    <Card\r\n      title=\"Connection\"\r\n      actions={[\r\n        <Button type=\"primary\" onClick={handleConnect}>\r\n          {connectBtn}\r\n        </Button>,\r\n        <Button danger onClick={handleDisconnect}>\r\n          Disconnect\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {ConnectionForm}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Connection\r\n","import React, { useContext } from 'react';\r\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\r\nimport { QosOption } from './index'\r\n\r\nconst Publisher = ({ publish }) => {\r\n  const [form] = Form.useForm();\r\n  const qosOptions = useContext(QosOption);\r\n\r\n  // topic, QoS for publishing message\r\n  const record = {\r\n    topic: 'switch',\r\n    qos: 0,\r\n    payload: `{state:\"on\"}`\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    publish(values)\r\n  };\r\n\r\n  const PublishForm = (\r\n    <Form\r\n      layout=\"vertical\"\r\n      name=\"basic\"\r\n      form={form}\r\n      initialValues={record}\r\n      onFinish={onFinish}\r\n    >\r\n      <Row gutter={20}>\r\n        <Col span={12}>\r\n          <Form.Item\r\n            label=\"Topic\"\r\n            name=\"topic\"\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Form.Item\r\n            label=\"QoS\"\r\n            name=\"qos\"\r\n          >\r\n            <Select options={qosOptions} />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={24}>\r\n          <Form.Item\r\n            label=\"Payload\"\r\n            name=\"payload\"\r\n          >\r\n            <Input.TextArea />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Publish\r\n            </Button>\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n\r\n  return (\r\n    <Card\r\n      title=\"Publisher\"\r\n    >\r\n      {PublishForm}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Publisher;\r\n","import React, { useContext } from 'react'\r\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd'\r\nimport { QosOption } from './index'\r\n\r\nconst Subscriber = ({ sub, unSub, showUnsub }) => {\r\n  const [form] = Form.useForm()\r\n  const qosOptions = useContext(QosOption)\r\n\r\n  // topic & QoS for MQTT subscribing\r\n  const record = {\r\n    topic: 'weather',\r\n    qos: 0,\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    sub(values)\r\n  }\r\n\r\n  const handleUnsub = () => {\r\n    const values = form.getFieldsValue()\r\n    unSub(values)\r\n  }\r\n\r\n  const SubForm = (\r\n    <Form\r\n      layout=\"vertical\"\r\n      name=\"basic\"\r\n      form={form}\r\n      initialValues={record}\r\n      onFinish={onFinish}\r\n    >\r\n      <Row gutter={20}>\r\n        <Col span={12}>\r\n          <Form.Item label=\"Topic\" name=\"topic\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Form.Item label=\"QoS\" name=\"qos\">\r\n            <Select options={qosOptions} />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Subscribe\r\n            </Button>\r\n            {showUnsub ? (\r\n              <Button\r\n                type=\"danger\"\r\n                style={{ marginLeft: '10px' }}\r\n                onClick={handleUnsub}\r\n              >\r\n                Unsubscribe\r\n              </Button>\r\n            ) : null}\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n\r\n  return <Card title=\"Subscriber\">{SubForm}</Card>\r\n}\r\n\r\nexport default Subscriber\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, List } from 'antd';\r\n\r\nconst Receiver = ({ payload }) => {\r\n  const [messages, setMessages] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (payload.topic) {\r\n      setMessages(messages => [...messages, payload])\r\n    }\r\n  }, [payload])\r\n\r\n  const renderListItem = (item) => (\r\n    <List.Item>\r\n      <List.Item.Meta\r\n        title={item.topic}\r\n        description={item.message}\r\n      />\r\n    </List.Item>\r\n  )\r\n\r\n  return (\r\n    <Card\r\n      title=\"Receiver\"\r\n    >\r\n      <List\r\n        size=\"small\"\r\n        bordered\r\n        dataSource={messages}\r\n        renderItem={renderListItem}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Receiver;\r\n","import React, { createContext, useEffect, useState } from 'react'\r\nimport Connection from './Connection'\r\nimport Publisher from './Publisher'\r\nimport Subscriber from './Subscriber'\r\nimport Receiver from './Receiver'\r\nimport mqtt from 'mqtt'\r\n\r\nexport const QosOption = createContext([])\r\n// https://github.com/mqttjs/MQTT.js#qos\r\nconst qosOption = [\r\n  {\r\n    label: '0',\r\n    value: 0,\r\n  },\r\n  {\r\n    label: '1',\r\n    value: 1,\r\n  },\r\n  {\r\n    label: '2',\r\n    value: 2,\r\n  },\r\n]\r\n\r\nconst HookMqtt = () => {\r\n  const [client, setClient] = useState(null)\r\n  const [isSubed, setIsSub] = useState(false)\r\n  const [payload, setPayload] = useState({})\r\n  const [connectStatus, setConnectStatus] = useState('Connect')\r\n\r\n  const mqttConnect = (host, mqttOption) => {\r\n    setConnectStatus('Connecting')\r\n    /**\r\n     * if protocol is \"ws\", connectUrl = \"ws://broker.emqx.io:8083/mqtt\"\r\n     * if protocol is \"wss\", connectUrl = \"wss://broker.emqx.io:8084/mqtt\"\r\n     *\r\n     * /mqtt: MQTT-WebSocket uniformly uses /path as the connection path,\r\n     * which should be specified when connecting, and the path used on EMQX is /mqtt.\r\n     *\r\n     * for more details about \"mqtt.connect\" method & options,\r\n     * please refer to https://github.com/mqttjs/MQTT.js#mqttconnecturl-options\r\n     */\r\n    setClient(mqtt.connect(host, mqttOption))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (client) {\r\n      // https://github.com/mqttjs/MQTT.js#event-connect\r\n      client.on('connect', () => {\r\n        setConnectStatus('Connected')\r\n        alert('connection successful')\r\n      })\r\n\r\n      // https://github.com/mqttjs/MQTT.js#event-error\r\n      client.on('error', (err) => {\r\n        console.error('Connection error: ', err)\r\n        client.end()\r\n      })\r\n\r\n      // https://github.com/mqttjs/MQTT.js#event-reconnect\r\n      client.on('reconnect', () => {\r\n        setConnectStatus('Reconnecting')\r\n      })\r\n\r\n      // https://github.com/mqttjs/MQTT.js#event-message\r\n      client.on('message', (topic, message) => {\r\n        const payload = { topic, message: message.toString() }\r\n        setPayload(payload)\r\n        console.log(`received message: ${message} from topic: ${topic}`)\r\n      })\r\n    }\r\n  }, [client])\r\n\r\n  // disconnect\r\n  // https://github.com/mqttjs/MQTT.js#mqttclientendforce-options-callback\r\n  const mqttDisconnect = () => {\r\n    if (client) {\r\n      try {\r\n        client.end(false, () => {\r\n          setConnectStatus('Connect')\r\n          console.log('disconnected successfully')\r\n        })\r\n      } catch (error) {\r\n        console.log('disconnect error:', error)\r\n      }\r\n    }\r\n  }\r\n\r\n  // publish message\r\n  // https://github.com/mqttjs/MQTT.js#mqttclientpublishtopic-message-options-callback\r\n  const mqttPublish = (context) => {\r\n    if (client) {\r\n      // topic, QoS & payload for publishing message\r\n      const { topic, qos, payload } = context\r\n      client.publish(topic, payload, { qos }, (error) => {\r\n        if (error) {\r\n          console.log('Publish error: ', error)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const mqttSub = (subscription) => {\r\n    if (client) {\r\n      // topic & QoS for MQTT subscribing\r\n      const { topic, qos } = subscription\r\n      // subscribe topic\r\n      // https://github.com/mqttjs/MQTT.js#mqttclientsubscribetopictopic-arraytopic-object-options-callback\r\n      client.subscribe(topic, { qos }, (error) => {\r\n        if (error) {\r\n          console.log('Subscribe to topics error', error)\r\n          return\r\n        }\r\n        console.log(`Subscribe to topics: ${topic}`)\r\n        setIsSub(true)\r\n      })\r\n    }\r\n  }\r\n\r\n  // unsubscribe topic\r\n  // https://github.com/mqttjs/MQTT.js#mqttclientunsubscribetopictopic-array-options-callback\r\n  const mqttUnSub = (subscription) => {\r\n    if (client) {\r\n      const { topic, qos } = subscription\r\n      client.unsubscribe(topic, { qos }, (error) => {\r\n        if (error) {\r\n          console.log('Unsubscribe error', error)\r\n          return\r\n        }\r\n        console.log(`unsubscribed topic: ${topic}`)\r\n        setIsSub(false)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Connection\r\n        connect={mqttConnect}\r\n        disconnect={mqttDisconnect}\r\n        connectBtn={connectStatus}\r\n      />\r\n      <QosOption.Provider value={qosOption}>\r\n        <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\r\n        <Publisher publish={mqttPublish} />\r\n      </QosOption.Provider>\r\n      <Receiver payload={payload} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HookMqtt\r\n","import React from 'react'\r\nimport HookMqtt from './components/Hook/'\r\n// Hook or Class\r\n// import ClassMqtt from './components/Class/'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HookMqtt />\r\n      {/* Hook or Class */}\r\n      {/* <ClassMqtt /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'))\r\nroot.render(<App />)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}